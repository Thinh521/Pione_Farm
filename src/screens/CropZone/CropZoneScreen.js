import React from 'react';
import {View, Text, ScrollView} from 'react-native';
import styles from './CropZone.styles';
import FeaturedFarms from './components/FeaturedFarms';
import {useQuery} from '@tanstack/react-query';
import {getFarmALl} from '../../api/farmAllApi';
import {scale} from '../../utils/scaling';
import LinearGradient from 'react-native-linear-gradient';

const cropZone = {
  id: '1',
  name: 'T√¢y Nguy√™n',
  location: 'Bao g·ªìm c√°c t·ªânh: Kon Tum, Gia Lai, ƒê·∫Øk L·∫Øk, ƒê·∫Øk N√¥ng, L√¢m ƒê·ªìng',
  area: '54,474 km¬≤',
  population: '5.8 tri·ªáu ng∆∞·ªùi',
  climate: {
    type: 'Kh√≠ h·∫≠u nhi·ªát ƒë·ªõi gi√≥ m√πa',
    temperature: '18-25¬∞C',
    rainfall: '1,800-2,500mm/nƒÉm',
    seasons: 'M√πa kh√¥: th√°ng 11-4, M√πa m∆∞a: th√°ng 5-10',
    humidity: '75-85%',
  },
  soil: {
    type: 'ƒê·∫•t ƒë·ªè bazan',
    ph: '5.5-6.5',
    characteristics: 'Gi√†u dinh d∆∞·ª°ng, tho√°t n∆∞·ªõc t·ªët, ch·ª©a nhi·ªÅu kho√°ng ch·∫•t',
    depth: '1-2m',
    advantages: 'Th√≠ch h·ª£p cho c√¢y c√¥ng nghi·ªáp l√¢u nƒÉm, ƒë·ªô ph√¨ nhi√™u cao',
  },
  crops: [
    {
      name: 'C√† ph√™',
      season: 'Gieo: th√°ng 5-6, Thu ho·∫°ch: th√°ng 11-1',
      area: '690,000 ha',
      yield: '18-20 t·∫•n/ha',
      description:
        'C√¢y tr·ªìng ch·ªß l·ª±c, chi·∫øm 60% di·ªán t√≠ch canh t√°c. Ch·ªß y·∫øu l√† Robusta.',
      requirements: 'Nhi·ªát ƒë·ªô 18-24¬∞C, l∆∞·ª£ng m∆∞a 1,500-2,000mm',
      techniques: 'Tr·ªìng theo h√†ng, t·ªâa c√†nh, b√≥n ph√¢n ƒë·ªãnh k·ª≥',
      diseases: 'B·ªánh g·ªâ s·∫Øt, s√¢u ƒë·ª•c c√†nh, s√¢u ƒë·ª•c qu·∫£',
    },
    {
      name: 'H·ªì ti√™u',
      season: 'Gieo: th√°ng 6-7, Thu ho·∫°ch: th√°ng 12-2',
      area: '85,000 ha',
      yield: '3-4 t·∫•n/ha',
      description: 'C√¢y gia v·ªã c√≥ gi√° tr·ªã kinh t·∫ø cao, xu·∫•t kh·∫©u ch·ªß y·∫øu.',
      requirements: 'Nhi·ªát ƒë·ªô 24-28¬∞C, ƒë·ªô ·∫©m 80-85%',
      techniques: 'Tr·ªìng leo gi√†n, t∆∞·ªõi nh·ªè gi·ªçt, c·∫Øt t·ªâa th∆∞·ªùng xuy√™n',
      diseases: 'B·ªánh h√©o xanh, n·∫•m r·ªÖ, s√¢u ƒë·ª•c th√¢n',
    },
    {
      name: 'Cao su',
      season: 'Tr·ªìng: th√°ng 5-6, Khai th√°c: sau 7 nƒÉm',
      area: '450,000 ha',
      yield: '2.5-3 t·∫•n m·ªß/ha/nƒÉm',
      description: 'C√¢y c√¥ng nghi·ªáp l√¢u nƒÉm, tu·ªïi th·ªç 25-30 nƒÉm.',
      requirements: 'Nhi·ªát ƒë·ªô 25-30¬∞C, l∆∞·ª£ng m∆∞a 2,000mm',
      techniques: 'C·∫°o m·ªß s√°ng s·ªõm, b√≥n ph√¢n theo chu k·ª≥',
      diseases: 'B·ªánh l√° kh√¥, n·∫•m r·ªÖ, s√¢u ƒÉn l√°',
    },
    {
      name: 'ƒêi·ªÅu',
      season: 'Tr·ªìng: th√°ng 5-6, Thu ho·∫°ch: th√°ng 2-4',
      area: '120,000 ha',
      yield: '1.5-2 t·∫•n/ha',
      description: 'C√¢y ch·ªãu h·∫°n t·ªët, th√≠ch h·ª£p v·ªõi v√πng ƒë·ªìi n√∫i.',
      requirements: 'Nhi·ªát ƒë·ªô 20-30¬∞C, ch·ªãu ƒë∆∞·ª£c h·∫°n h√°n',
      techniques: 'T·ªâa c√†nh t·∫°o t√°n, ph√≤ng tr·ª´ s√¢u b·ªánh',
      diseases: 'B·ªánh ƒë·ªëm l√°, s√¢u ƒë·ª•c qu·∫£, r·ªáp s√°p',
    },
    {
      name: 'Ch√®',
      season: 'Tr·ªìng: th√°ng 6-7, H√°i: quanh nƒÉm',
      area: '25,000 ha',
      yield: '8-12 t·∫•n l√° t∆∞∆°i/ha/nƒÉm',
      description: 'Th√≠ch h·ª£p v·ªõi v√πng cao, s∆∞∆°ng m√π nhi·ªÅu.',
      requirements: 'ƒê·ªô cao >800m, nhi·ªát ƒë·ªô 18-25¬∞C',
      techniques: 'H√°i non li√™n t·ª•c, t·ªâa c√†nh ƒë·ªãnh k·ª≥',
      diseases: 'B·ªánh ƒë·ªëm n√¢u, s√¢u ƒëo, nh·ªán ƒë·ªè',
    },
  ],
  advantages: [
    'ƒê·∫•t ƒëai ph√¨ nhi√™u, th√≠ch h·ª£p c√¢y c√¥ng nghi·ªáp',
    'Kh√≠ h·∫≠u ·ªïn ƒë·ªãnh, 2 m√πa r√µ r·ªát',
    'ƒê·ªãa h√¨nh ƒë·ªìi n√∫i, thu·∫≠n l·ª£i tho√°t n∆∞·ªõc',
    'Ngu·ªìn nh√¢n c√¥ng d·ªìi d√†o',
    'Kinh nghi·ªám canh t√°c l√¢u ƒë·ªùi',
  ],
  challenges: [
    'Bi·∫øn ƒë·ªïi kh√≠ h·∫≠u ·∫£nh h∆∞·ªüng nƒÉng su·∫•t',
    'S√¢u b·ªánh ph√°t tri·ªÉn m·∫°nh',
    'Gi√° c·∫£ th·∫ø gi·ªõi bi·∫øn ƒë·ªông',
    'C·∫ßn ƒë·∫ßu t∆∞ c√¥ng ngh·ªá hi·ªán ƒë·∫°i',
    'B·∫£o v·ªá m√¥i tr∆∞·ªùng sinh th√°i',
  ],
};

const CropZoneScreen = () => {
  const {
    data: farms,
    isLoading,
    isError,
  } = useQuery({
    queryKey: ['FarmAll'],
    queryFn: getFarmALl,
    select: res => res.data,
    staleTime: 10 * 60 * 1000,
  });

  return (
    <ScrollView
      style={styles.container}
      showsVerticalScrollIndicator={false}
      contentContainerStyle={{paddingBottom: scale(20)}}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.zoneName}>{cropZone.name}</Text>
        <Text style={styles.location}>{cropZone.location}</Text>
        <View style={styles.statsContainer}>
          <View style={styles.statBox}>
            <Text style={styles.statValue}>{cropZone.area}</Text>
            <Text style={styles.statLabel}>Di·ªán t√≠ch</Text>
          </View>
          <View style={styles.statBox}>
            <Text style={styles.statValue}>{cropZone.population}</Text>
            <Text style={styles.statLabel}>D√¢n s·ªë</Text>
          </View>
        </View>
      </View>

      {/* Climate Section */}
      <View style={styles.card}>
        <Text style={styles.sectionTitle}>üå§ Kh√≠ h·∫≠u</Text>
        <View style={styles.infoGrid}>
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>Lo·∫°i kh√≠ h·∫≠u:</Text>
            <Text style={styles.infoValue}>{cropZone.climate.type}</Text>
          </View>
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>Nhi·ªát ƒë·ªô:</Text>
            <Text style={styles.infoValue}>{cropZone.climate.temperature}</Text>
          </View>
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>L∆∞·ª£ng m∆∞a:</Text>
            <Text style={styles.infoValue}>{cropZone.climate.rainfall}</Text>
          </View>
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>ƒê·ªô ·∫©m:</Text>
            <Text style={styles.infoValue}>{cropZone.climate.humidity}</Text>
          </View>
        </View>
        <Text style={styles.seasonText}>{cropZone.climate.seasons}</Text>
      </View>

      {/* Soil Section */}
      <View style={styles.card}>
        <Text style={styles.sectionTitle}>üå± ƒê·∫∑c ƒëi·ªÉm ƒë·∫•t ƒëai</Text>
        <View style={styles.infoGrid}>
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>Lo·∫°i ƒë·∫•t:</Text>
            <Text style={styles.infoValue}>{cropZone.soil.type}</Text>
          </View>
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>ƒê·ªô pH:</Text>
            <Text style={styles.infoValue}>{cropZone.soil.ph}</Text>
          </View>
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>ƒê·ªô s√¢u:</Text>
            <Text style={styles.infoValue}>{cropZone.soil.depth}</Text>
          </View>
        </View>
        <Text style={styles.infoDescription}>
          {cropZone.soil.characteristics}
        </Text>
        <Text style={styles.advantageText}>‚úì {cropZone.soil.advantages}</Text>
      </View>

      {/* Crops Section */}
      <View style={styles.card}>
        <Text style={styles.sectionTitle}>üåæ C√¢y tr·ªìng ch·ªß l·ª±c</Text>
        <ScrollView
          horizontal
          showsHorizontalScrollIndicator={false}
          contentContainerStyle={styles.horizontalScroll}>
          {cropZone.crops.map((crop, index) => (
            <View key={index} style={styles.cropCardHorizontal}>
              <View style={styles.cropHeader}>
                <Text style={styles.cropName}>{crop.name}</Text>
                <View style={styles.cropStats}>
                  <Text style={styles.cropArea}>{crop.area}</Text>
                  <Text style={styles.cropYield}>{crop.yield}</Text>
                </View>
              </View>

              <Text style={styles.cropDescription}>{crop.description}</Text>

              <View style={styles.cropDetails}>
                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>üìÖ M√πa v·ª•:</Text>
                  <Text style={styles.detailValue}>{crop.season}</Text>
                </View>
                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>üå° Y√™u c·∫ßu:</Text>
                  <Text style={styles.detailValue}>{crop.requirements}</Text>
                </View>
                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>üîß K·ªπ thu·∫≠t:</Text>
                  <Text style={styles.detailValue}>{crop.techniques}</Text>
                </View>
                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>‚ö†Ô∏è S√¢u b·ªánh:</Text>
                  <Text style={styles.detailValue}>{crop.diseases}</Text>
                </View>
              </View>
            </View>
          ))}
        </ScrollView>
      </View>

      <FeaturedFarms farms={farms} />

      {/* Advantages & Challenges */}
      <View>
        <View style={[styles.card, styles.halfCard]}>
          <Text style={styles.sectionTitle}>∆Øu th·∫ø</Text>
          {cropZone.advantages.map((advantage, index) => (
            <View
              style={{
                flexDirection: 'row',
                alignItems: 'center',
                marginBottom: scale(6),
              }}>
              <View style={styles.highlightDot} />
              <Text key={index} style={styles.listItem}>
                {advantage}
              </Text>
            </View>
          ))}
        </View>

        <View style={[styles.card, styles.halfCard]}>
          <Text style={styles.sectionTitle}>Th√°ch th·ª©c</Text>
          {cropZone.challenges.map((challenge, index) => (
            <View
              style={{
                flexDirection: 'row',
                alignItems: 'center',
                marginBottom: scale(6),
              }}>
              <View style={styles.highlightDot} />
              <Text key={index} style={styles.listItem}>
                {challenge}
              </Text>
            </View>
          ))}
        </View>
      </View>
    </ScrollView>
  );
};

export default CropZoneScreen;
